#!/usr/bin/env zsh
# exports

#export EDITOR="vim"
export GREP_COLOR='1;33'

##Â OS
### macOS
if [ "$(uname -s)" = "Darwin" ]; then
  # arcanist
  if [ -d "${HOME}/Library/php/arcanist/bin" ]; then
    export PATH="${HOME}/Library/php/arcanist/bin:${PATH}"
  fi
  # docker
  if [ -S /var/run/docker.sock ]; then
    export DOCKER_HOST=unix:///var/run/docker.sock
  fi
  # gcloud
  if [ -f "${HOME}/work/google-cloud-sdk/path.zsh.inc" ] && [ -f "${HOME}/work/google-cloud-sdk/completion.zsh.inc" ]; then
    . "${HOME}/work/google-cloud-sdk/path.zsh.inc";
    . "${HOME}/work/google-cloud-sdk/completion.zsh.inc";
  fi
  # ghostty
  if [ -d "/Applications/Ghostty.app/Contents/MacOS/" ]; then
    export PATH="/Applications/Ghostty.app/Contents/MacOS/:${PATH}"
  fi
  if [ -n "${GHOSTTY_RESOURCES_DIR}" ]; then
    . "${GHOSTTY_RESOURCES_DIR}/shell-integration/zsh/ghostty-integration"
  fi
  # keka
  if [ -d "/Applications/Keka.app/Contents/MacOS/" ]; then
    export PATH="/Applications/Keka.app/Contents/MacOS/:${PATH}"
    alias keka='Keka --cli'
    alias kunrar='keka unrar e -y'
  fi
  # ovftool
  if [ -d "/Applications/VMware Fusion.app/Contents/Library/VMware OVF Tool" ]; then
     export PATH="/Applications/VMware Fusion.app/Contents/Library/VMware OVF Tool:${PATH}"
  fi
  if [ -d "/Applications/VMware OVF Tool" ]; then
    export PATH="/Applications/VMware OVF Tool:${PATH}"
  fi
  # python3
  PY_VERSION="3.12"
  if [ -d "${HOME}/Library/Python/${PY_VERSION}/bin" ]; then
     export PATH="${HOME}/Library/Python/${PY_VERSION}/bin:${PATH}"
  fi
  # rust
  if [ -d "${HOME}/.cargo/bin" ]; then
     export PATH="${HOME}/.cargo/bin:${PATH}"
  fi
  # tart
  if [ -d "/Applications/tart.app/Contents/MacOS/" ]; then
     export PATH="/Applications/tart.app/Contents/MacOS/:${PATH}"
  fi
  # vscode
  if [ -d "/Applications/Visual Studio Code.app/Contents/Resources/app/bin" ]; then
     export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:${PATH}"
  fi
fi

### OpenBSD
if [ "$(uname -s)" = "OpenBSD" ]; then
  export CC="ch"
  export PKG_PATH="http://ftp.${CC}.openbsd.org/pub/OpenBSD/$(uname -r)/packages/$(uname -m)/"
  export CVSROOT="anoncvs@anoncvs.${CC}.openbsd.org:/cvs"
fi

## User config
### mbin PATH
if [ -d "${HOME}/mbin/" ]; then
  export PATH="${HOME}/mbin:${PATH}"
fi

### pager
MOST="$(which most)";
if [ -x "${MOST}" ]; then
  export PAGER='most';
fi

### prompt
if [ ${UID} = 0 ]; then
  LOGIN_COLOR=red
else
  LOGIN_COLOR=green
fi
export PS1="%F{white}%T%f %F{${LOGIN_COLOR}}%n%f@%F{yellow}%M%f:%F{cyan}%~%f %# "

### socks
if [ -f "${HOME}/.config/socks/socks-passwd" ]; then
  export TSOCKS_USER="${USER}"
  export TSOCKS_PASSWORD="$(cat ${HOME}/.config/socks/socks-passwd)"
  export TSOCKS_DEBUG=1
  alias runsocks="tsocks"
fi

### ssh agent
export HOSTNAME="$(hostname -s)"
export SSH_AUTH_SOCK="${HOME}/.ssh/ssh-agent.${HOSTNAME}.sock"
ssh-add -l > /dev/null
if [ $? -gt 0 ] ; then
  ssh-agent -a "${SSH_AUTH_SOCK}" > "${HOME}/.ssh/ssh-agent.${HOSTNAME}.info"
  . "${HOME}/.ssh/ssh-agent.${HOSTNAME}.info"
  ssh-add
fi

## Tools
### AWS
#export AWS_SDK_LOAD_CONFIG=1

### Artifactory
if [ -r "${HOME}/.config/jfrog/artifacory-url" ]; then
  export ART_URL="$(cat ${HOME}/.config/jfrog/artifacory-url)"
fi

### jenkins
if [ -r "${HOME}/.config/jenkins/jenkins-token" ] && [ -r "${HOME}/.config/jenkins/jenkins-url" ]; then
  export JENKINS_TOKEN="$(cat ${HOME}/.config/jenkins/jenkins-token)"
  export JENKINS_URL="$(cat ${HOME}/.config/jenkins/jenkins-url)"
  alias lint-pipe="curl --user ${JENKINS_TOKEN} -X POST -F 'jenkinsfile=<Jenkinsfile' https://${JENKINS_URL}/pipeline-model-converter/validate"
fi

### Prometheus
if [ -r "${HOME}/.config/prometheus/prom-url" ]; then
  export PROM_URL="$(cat ${HOME}/.config/prometheus/prom-url)"
  alias cprom="curl -LX POST http://${PROM_URL}/api/v1/admin/tsdb/clean_tombstones -w '%{http_code}\n'"
  alias rprom="curl -LX POST http://${PROM_URL}/-/reload -w '%{http_code}\n'"
fi

### Proxmox
if [ -r "${HOME}/.config/proxmox/proxmox-user" ] && [ -r "${HOME}/.config/proxmox/proxmox-passwd" ] && [ -r  "${HOME}/.config/proxmox/proxmox-url" ]; then
  export PROXMOX_USER="$(cat ${HOME}/.config/proxmox/proxmox-user)"
  export PROXMOX_PASSWD="$(cat ${HOME}/.config/proxmox/proxmox-passwd)"
  export PROXMOX_URL="$(cat ${HOME}/.config/proxmox/proxmox-url)"
fi

# quay.io
if [ -r "${HOME}/.config/quay/quay-user" ] && [ -r "${HOME}/.config/quay/quay-token" ]; then
  export Q_USER="$(cat ${HOME}/.config/quay/quay-user)"
  export Q_TOKEN="$(cat ${HOME}/.config/quay/quay-token)"
fi

### Terraform
#export TF_LOG=TRACE

### Vault
if [ -r "${HOME}/.config/vault/vault-addr" ]; then
  export VAULT_ADDR="$(cat ${HOME}/.config/vault/vault-addr)"
fi

### Xray
if [ -r "${HOME}/.config/jfrog/xray-url" ]; then
  export XRAY_URL="$(cat ${HOME}/.config/jfrog/xray-url)"
fi
